# Задача 5. Обработка логов
# Контекст.
# Вы работаете в большой компании, которая обслуживает сложную систему торговли. Каждый день генерируется огромное
# количество лог-файлов, содержащих информацию о торговых операциях. Вам поставлена задача разработать программу,
# которая будет автоматически анализировать эти лог-файлы и находить строки с сообщениями об ошибках (ERROR). Это
# поможет вам быстро отслеживать проблемы в торговой системе и эффективно на них реагировать.
#
# Задача.
# Напишите программу, которая считывает строки из файла и выводит строки, содержащие слово ERROR, в новый файл.
#
# Требования:
# Используйте модуль os для работы с файлами и путями.
# Учтите, что файл может быть очень большим по объёму, поэтому не загружайте его в память целиком.
# Создайте функцию-генератор error_log_generator, которая будет получать на вход путь до файла с логами и возвращать
# строки из этого файла, которые содержат слово ERROR (одно обращение к генератору должно возвращать одну строку из
# файла).
#
# Советы:
# Цикл for по файлу будет считывать в память ровно по одной строке из файла за итерацию.
# Генератор должен возвращать только строки со словом ERROR. Другие строки, которые будут считываться из файла, нужно
# будет игнорировать (применять yield только к правильным строкам).
# Для наглядного примера вы можете сгенерировать очень большой текстовый файл (для этого надо запустить код из файла
# text_generator.py) и попробовать загрузить его в память при помощи метода read(), применённого к этому файлу.
# Учтите, что генерация файла такого размера может занять несколько десятков минут!

from pathlib import Path


def error_log_generator(cur_path):
    """Функция-генератор получает на вход путь до файла с логами и возвращает
    строки из этого файла, которые содержат слово ERROR

    :param cur_path: Путь до файла
    :type cur_path: str
    :return line: С помощью yield строку из файла, если она содержит слово ERROR
    :rtype: str
    """

    with open(Path(cur_path), 'r', encoding='utf-8') as text_file:
        for line in text_file:
            if 'ERROR' in line:
                yield line


my_path = 'F:/Education/lessons/Modules/module13/target_file.txt' # todo в этом случае лучше использовать относительный путь, т.к. на другом компе абсолютный путь может отличаться (99 из 100)
with open(Path('error_logs.txt'), 'w', encoding='utf-8') as log_file:
    for data in error_log_generator(my_path):
        log_file.write(data)
