# Задача 2. Математический модуль
# Что нужно сделать
# Вася использует в своей программе очень много различных математических вычислений, связанных с фигурами. Например,
# нахождение их площадей или периметров. Поэтому, чтобы не захламлять код огромным количеством функций, он решил
# выделить для них отдельный класс, подключить как модуль и использовать по аналогии с модулем math.

# Реализуйте класс MyMath, состоящий как минимум из следующих методов (можете бонусом добавить и другие методы):

# вычисление длины окружности,
# вычисление площади окружности,
# вычисление объёма куба,
# вычисление площади поверхности сферы.
# Пример основного кода:

# res_1 = MyMath.circle_len(radius=5)
# res_2 = MyMath.circle_sq(radius=6)
# print(res_1)
# print(res_2)
# Результат:

# 31.41592653589793

# 113.09733552923255

# Что оценивается
# Результат вычислений корректен.
# Модели реализованы в стиле ООП, основной функционал описан в методах классов и отдельных функциях.
# При написании классов соблюдаются основные принципы ООП: инкапсуляция, наследование и полиморфизм.
# Для получения и установки значений приватных атрибутов используются сеттеры и геттеры с соответствующими декораторами.
# Для создания нового класса на основе уже существующего используется наследование.
# Для статических и классовых методов используется декоратор classmethod.
# Формат вывода соответствует примеру.
# Переменные, функции и собственные методы классов имеют значащие имена (не a, b, c, d).
# Классы и методы/функции имеют прописанную документацию.
# Есть аннотация типов для методов/функций и их аргументов (кроме args и kwargs). Если функция/метод ничего не
# возвращает, то используется None.

from math import pi


class MyMath:
    """Класс MyMath

    Methods:
        circle_len(radius): вычисление длины окружности,
        circle_sq(radius): вычисление площади окружности,
        cube_vol(side): вычисление объёма куба,
        sphere_sq(radius): вычисление площади поверхности сферы.

    """
    @classmethod  # можно использовать также @staticmethod, но в уроке сказали, что от него постепенно отказываются
    def circle_len(cls, radius: int | float) -> int | float:
        return 2 * pi * radius

    @classmethod
    def circle_sq(cls, radius: int | float) -> int | float:
        return pi * radius ** 2

    @classmethod
    def cube_vol(cls, side: int | float) -> int | float:
        return side ** 3

    @classmethod
    def sphere_sq(cls, radius: int | float) -> int | float:
        return 4 * pi * radius ** 2


res_1 = MyMath.circle_len(radius=5)
res_2 = MyMath.circle_sq(radius=6)
res_3 = MyMath.cube_vol(side=3)
res_4 = MyMath.sphere_sq(radius=4)
print(res_1)
print(res_2)
print(res_3)
print(res_4)
