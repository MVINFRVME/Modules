# Задача 7. Своя функция zip
# Что нужно сделать
# В самом конце собеседования вам неожиданно сказали: «Расскажите, что делает функция zip». Чтобы произвести впечатление
# , вы решили не только рассказать о ней, но и написать её аналог.
# Даны строка и кортеж из чисел. Напишите программу, которая создаёт генератор из пар кортежей «символ — число».
# Затем выведите на экран сам генератор и кортежи.

# Пример:
# Строка: abcd
# Кортеж чисел: (10, 20, 30, 40)

# Результат:
# <generator object <genexpr> at 0x00000204A4234048>
# ('a', 10)
# ('b', 20)
# ('c', 30)
# ('d', 40)

# Дополнительно: создайте полный аналог функции zip — сделайте так, чтобы программа работала с любыми итерируемыми
# типами данных.

# Подсказка
# Ранее мы проходили List comprehensions — по сути, генератор списка. В этом случае, чтобы создать генератор, попробуйте
# поэкспериментировать с генератором списка.

# Пример:

# print([i for i in range(10)])
# print((i for i in range(10)))


def my_zip(s_1, s_2):

    tuple_res = ((s_1[i_val], s_2[i_val]) for i_val in range(len(min(s_1, s_2, key=len)))) # todo самые крайние скобки ничего не делают, чтобы создать генератор, нужно квадратные скобки поменять на круглые
    return tuple_res


seq_1 = 'abcd'
seq_2 = (10, 20, 30, 40)

print(my_zip(seq_1, seq_2))

for pair in my_zip(seq_1, seq_2):
    print(pair)
